/*
Design a Tic-tac-toe game that is played between two players on a n x n grid.

You may assume the following rules:

A move is guaranteed to be valid and is placed on an empty block.
Once a winning condition is reached, no more moves is allowed.
A player who succeeds in placing n of their marks in a horizontal, vertical, or diagonal row wins the game.
*/
class TicTacToe {
public:
    /** Initialize your data structure here. */
    TicTacToe(int n):board(n,vector<int>(n,0)),d(n),diag(2,pair<int,int>()){
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    int move(int row, int col, int player) {
        board[row][col]=player;
        int count_r=0,count_c=0;
        for(int i=0;i<d;i++){
            if(board[row][i]==player)
                count_r++;
            else
                break;
        }
        for(int i=0;i<d;i++){
            if(board[i][col]==player)
                count_c++;
            else
                break;
        }
        if(count_r==d or count_c==d) return player;
        if(row!=col and (row+col)!=d-1) return 0;
        if(row==col) {
            if(d%2==1 and row==d/2)
                {diag[player-1].first++;diag[player-1].second++;}
            else
                diag[player-1].first++;
        }
        else
            diag[player-1].second++;
        
        return (diag[player-1].first==d or diag[player-1].second==d)?player:0;
    }
private:
    vector<vector<int>> board;
    vector<pair<int,int>> diag;
    int d;
};
